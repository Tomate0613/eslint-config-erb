// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic should report semicolon errors 1`] = `
Object {
  "errorCount": 4,
  "fixableErrorCount": 3,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 4,
      "filePath": "/Users/amila/Documents/Projects/eslint-config-erb/test/bad.js",
      "fixableErrorCount": 3,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 19,
          "endColumn": 19,
          "endLine": 1,
          "fix": Object {
            "range": Array [
              18,
              18,
            ],
            "text": ";",
          },
          "line": 1,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 8,
          "endLine": 3,
          "line": 3,
          "message": "'bar' is assigned a value but never used.",
          "nodeType": "Identifier",
          "ruleId": "no-unused-vars",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 8,
          "endLine": 3,
          "fix": Object {
            "range": Array [
              37,
              40,
            ],
            "text": "const",
          },
          "line": 3,
          "message": "'bar' is never reassigned. Use 'const' instead.",
          "nodeType": "Identifier",
          "ruleId": "prefer-const",
          "severity": 2,
        },
        Object {
          "column": 17,
          "endColumn": 17,
          "endLine": 3,
          "fix": Object {
            "range": Array [
              53,
              53,
            ],
            "text": ";",
          },
          "line": 3,
          "message": "Insert \`;\`",
          "nodeType": null,
          "ruleId": "prettier/prettier",
          "severity": 2,
        },
      ],
      "source": "const foo = 'adsf'
console.log(foo);
let bar = 'adsf'
",
      "warningCount": 0,
    },
  ],
  "usedDeprecatedRules": Array [
    Object {
      "replacedBy": Array [
        "padding-line-between-statements",
      ],
      "ruleId": "lines-around-directive",
    },
    Object {
      "replacedBy": Array [],
      "ruleId": "jsx-a11y/label-has-for",
    },
    Object {
      "replacedBy": Array [],
      "ruleId": "flowtype/valid-syntax",
    },
  ],
  "warningCount": 0,
}
`;
